apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        debug {
            storeFile file('../debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        def proguardFile = getRootDir().getPath() + "/presentation/proguard-rules.pro"

        release {
            signingConfig signingConfigs.debug
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), proguardFile
            buildConfigField "boolean", "isAllowScreenShot", rootProject.ext.release.allowScreenShot
            buildConfigField "boolean", "isCheckMemoryLeak", rootProject.ext.release.checkMemoryLeak
        }

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), proguardFile
            buildConfigField "boolean", "isAllowScreenShot", rootProject.ext.debug.allowScreenShot
            buildConfigField "boolean", "isCheckMemoryLeak", rootProject.ext.debug.checkMemoryLeak
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    sourceSets {
        main {
            java.srcDirs = ['src/main/java', 'src/main/aidl']
        }
    }
    applicationVariants.all { variant ->
        def apkTime = new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
        variant.outputs.all { output ->
            def buildName = "PubaliBank"
            def type = variant.buildType.name
            def releaseApkName = buildName + '_' + versionName + '_' + apkTime + "_" + type + '.apk'
            outputFileName = releaseApkName
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':domain')
    implementation project(':data')

    implementation rootProject.ext.dep.appcompat
    implementation rootProject.ext.dep.constraint
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation rootProject.ext.dep.junit
    androidTestImplementation rootProject.ext.dep.testRunner
    androidTestImplementation rootProject.ext.dep.expressoCore
    debugImplementation rootProject.ext.dep.leakcanary_android
    releaseImplementation rootProject.ext.dep.leakcanary_android_no_op
    debugImplementation rootProject.ext.dep.leakcanary_support_fragment
    implementation rootProject.ext.dep.rxjava
    implementation rootProject.ext.dep.rxandroid
    implementation files('libs/SQLiteStudioRemote.jar')
    implementation rootProject.ext.dep.dragger
    annotationProcessor rootProject.ext.dep.dragger_compiler
    implementation 'me.drakeet.support:toastcompat:1.1.0'
    implementation rootProject.ext.dep.butterknife
    annotationProcessor rootProject.ext.dep.butterknife_compiler
    implementation 'com.android.support:recyclerview-v7:28.0.0'
    implementation rootProject.ext.dep.eventbus
    implementation 'com.hannesdorfmann:adapterdelegates3:3.0.1'

    implementation 'com.squareup.picasso:picasso:2.8'
}
